package kpa_fitness;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.*;

public class Coach {
    private JFrame frame;
    private JTextField coachNameField;
    private JTextField coachPhoneNumberField;
    private JTextField hourlyRateField;
    private JTextArea displayArea;

    public Coach() {
        initializeGUI();
    }

    private void initializeGUI() {
        frame = new JFrame("Coach Manager");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 300);

        JPanel panel = new JPanel();
        panel.setLayout(new GridLayout(7, 2));  // Changed to 7 rows to accommodate the clear button

        panel.add(new JLabel("Coach Name:"));
        coachNameField = new JTextField();
        panel.add(coachNameField);

        panel.add(new JLabel("Phone Number:"));
        coachPhoneNumberField = new JTextField();
        panel.add(coachPhoneNumberField);

        panel.add(new JLabel("Hourly Rate:"));
        hourlyRateField = new JTextField();
        panel.add(hourlyRateField);

        JButton addButton = new JButton("Add Coach");
        addButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                addCoach(coachNameField.getText(), coachPhoneNumberField.getText(), Double.parseDouble(hourlyRateField.getText()));
            }
        });
        panel.add(addButton);

        JButton removeButton = new JButton("Remove Coach");
        removeButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                removeCoach(coachNameField.getText());
            }
        });
        panel.add(removeButton);

        JButton findButton = new JButton("Find Coach");
        findButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                findCoach(coachNameField.getText());
            }
        });
        panel.add(findButton);

        JButton printButton = new JButton("Print Coaches");
        printButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                printCoaches();
            }
        });
        panel.add(printButton);
        
        // Add clear button
        JButton clearButton = new JButton("Clear Fields");
        clearButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                clearFields();
            }
        });
        panel.add(clearButton);

        displayArea = new JTextArea();
        displayArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(displayArea);

        frame.getContentPane().add(panel, BorderLayout.NORTH);
        
        JButton backButton = new JButton("Back to Main");
        backButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                frame.dispose();
                Main main = new Main(); // Create an instance of the Main class
                main.setVisible(true);
            }
        });
        panel.add(backButton);
        frame.getContentPane().add(scrollPane, BorderLayout.CENTER);

        frame.setVisible(true);
    }
    

    // Method to clear text fields
    private void clearFields() {
        coachNameField.setText("");
        coachPhoneNumberField.setText("");
        hourlyRateField.setText("");
    }

    public void addCoach(String name, String phoneNumber, double hourlyRate) {
        try (Connection connection = DriverManager.getConnection("jdbc:mysql://sql12.freesqldatabase.com:3306/sql12720084", "sql12720084", "QJFIkNEZxE")) {
            String query = "INSERT INTO coaches (name, phone_number, hourly_rate) VALUES (?, ?, ?)";
            PreparedStatement pst = connection.prepareStatement(query);
            pst.setString(1, name);
            pst.setString(2, phoneNumber);
            pst.setDouble(3, hourlyRate);
            pst.executeUpdate();
            displayArea.append("Added coach: " + name + "\n");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void removeCoach(String name) {
        try (Connection connection = DriverManager.getConnection("jdbc:mysql://sql12.freesqldatabase.com:3306/sql12720084", "sql12720084", "QJFIkNEZxE")) {
            String query = "DELETE FROM coaches WHERE name = ?";
            PreparedStatement pst = connection.prepareStatement(query);
            pst.setString(1, name);
            int rowsAffected = pst.executeUpdate();
            if (rowsAffected > 0) {
                displayArea.append("Removed coach: " + name + "\n");
            } else {
                displayArea.append("Coach not found: " + name + "\n");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void findCoach(String name) {
        try (Connection connection = DriverManager.getConnection("jdbc:mysql://sql12.freesqldatabase.com:3306/sql12720084", "sql12720084", "QJFIkNEZxE")) {
            String query = "SELECT * FROM coaches WHERE name = ?";
            PreparedStatement pst = connection.prepareStatement(query);
            pst.setString(1, name);
            ResultSet rs = pst.executeQuery();
            if (rs.next()) {
                String phoneNumber = rs.getString("phone_number");
                double hourlyRate = rs.getDouble("hourly_rate");
                displayArea.append("Found coach: Name: " + name + ", Phone Number: " + phoneNumber + ", Hourly Rate: " +"RM"+ hourlyRate + "\n");
            } else {
                displayArea.append("Coach not found: " + name + "\n");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void printCoaches() {
        try (Connection connection = DriverManager.getConnection("jdbc:mysql://sql12.freesqldatabase.com:3306/sql12720084", "sql12720084", "QJFIkNEZxE")) {
            String query = "SELECT * FROM coaches";
            PreparedStatement pst = connection.prepareStatement(query);
            ResultSet rs = pst.executeQuery();
            displayArea.append("Current Coaches:\n");
            while (rs.next()) {
                String name = rs.getString("name");
                String phoneNumber = rs.getString("phone_number");
                double hourlyRate = rs.getDouble("hourly_rate");
                displayArea.append("Name: " + name + ", Phone Number: " + phoneNumber + ", Hourly Rate: "+"RM" + hourlyRate + "\n");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Coach();
            }
        });
    }
}

